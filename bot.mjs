import TelegramBot from 'node-telegram-bot-api';
import { GoogleGenerativeAI } from '@google/generative-ai';
import axios from 'axios';
import crypto from 'crypto';

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const MAX_FILE_SIZE = 4 * 1024 * 1024; // 4MB

if (!TELEGRAM_BOT_TOKEN || !GEMINI_API_KEY) {
  throw new Error('TELEGRAM_BOT_TOKEN –∏–ª–∏ GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
}

const bot = new TelegramBot(TELEGRAM_BOT_TOKEN);
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);

const logger = {
  info: (message, ...args) => console.log(`[–ò–ù–§–û] ${message}`, ...args),
  warn: (message, ...args) => console.warn(`[–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï] ${message}`, ...args),
  error: (message, ...args) => console.error(`[–û–®–ò–ë–ö–ê] ${message}`, ...args),
};

const analysisCache = new Map();

function markdownToTelegramHTML(markdown) {
  let html = markdown;

  // –ó–∞–º–µ–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  html = html.replace(/^### (.*$)/gim, '<b>$1</b>');
  html = html.replace(/^## (.*$)/gim, '<b>$1</b>');
  html = html.replace(/^# (.*$)/gim, '<b>$1</b>');

  // –ó–∞–º–µ–Ω–∞ –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ –∫—É—Ä—Å–∏–≤–∞
  html = html.replace(/\*\*(.*?)\*\*/g, '<b>$1</b>');
  html = html.replace(/\*(.*?)\*/g, '<i>$1</i>');

  // –ó–∞–º–µ–Ω–∞ —Å–ø–∏—Å–∫–æ–≤
  html = html.replace(/^\s*[-*] (.*)$/gm, '‚Ä¢ $1');

  // –ó–∞–º–µ–Ω–∞ —Å—Å—ã–ª–æ–∫
  html = html.replace(/\[(.*?)\]\((.*?)\)/g, '<a href="$2">$1</a>');

  // –ó–∞–º–µ–Ω–∞ –∫–æ–¥–∞
  html = html.replace(/`(.*?)`/g, '<code>$1</code>');

  return html;
}

async function checkImageType(imageBuffer) {
  const signature = imageBuffer.toString('hex', 0, 4);
  const signatures = {
    'ffd8ffe0': 'image/jpeg',
    'ffd8ffe1': 'image/jpeg',
    '89504e47': 'image/png',
    '47494638': 'image/gif',
  };
  return signatures[signature] || 'unknown';
}

async function analyzeImage(imageBuffer, chatId) {
  try {
    const imageHash = crypto.createHash('md5').update(imageBuffer).digest('hex');
    if (analysisCache.has(imageHash)) {
      logger.info('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑');
      return analysisCache.get(imageHash);
    }

    const model = genAI.getGenerativeModel({
      generationConfig: {
        temperature: 0,
      },
      model: 'gemini-1.5-flash'
    });

    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. 
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:

    ### üì∏ –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:
    * –û–ø–∏—à–∏—Ç–µ –≥–ª–∞–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏–ª–∏ —Å—É–±—ä–µ–∫—Ç—ã
    * –£–∫–∞–∂–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã

    ### üîç –î–µ—Ç–∞–ª–∏:
    * –û–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π –≤–∏–¥–∏–º—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    * –£–∫–∞–∂–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–ª–∏ –Ω–µ–æ–±—ã—á–Ω—ã–µ –¥–µ—Ç–∞–ª–∏

    ### üåç –ö–æ–Ω—Ç–µ–∫—Å—Ç:
    * –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–ª–∏ –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É
    * –û–ø–∏—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–ª–∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    ### üí° –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:
    * –î–æ–±–∞–≤—å—Ç–µ –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –∏–ª–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç** –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤–∞–∂–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π. –ë—É–¥—å—Ç–µ –∫—Ä–∞—Ç–∫–∏, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã.`;

    const result = await model.generateContent([
      {
        inlineData: {
          data: imageBuffer.toString('base64'),
          mimeType: 'image/jpeg'
        }
      },
      { text: prompt },
    ]);

    if (!result.response) {
      throw new Error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API Gemini');
    }

    const markdownAnalysis = result.response.text();
    const htmlAnalysis = markdownToTelegramHTML(markdownAnalysis);

    analysisCache.set(imageHash, htmlAnalysis);
    return htmlAnalysis;
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${error.message}`);
  }
}

async function handlePhoto(msg) {
  const chatId = msg.chat.id;
  try {
    const fileId = msg.photo[msg.photo.length - 1].file_id;
    const fileLink = await bot.getFileLink(fileId);

    const imageResponse = await axios.get(fileLink, { responseType: 'arraybuffer' });
    const imageBuffer = Buffer.from(imageResponse.data);

    if (imageBuffer.length > MAX_FILE_SIZE) {
      throw new Error(`–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (${imageBuffer.length} –±–∞–π—Ç) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä`);
    }

    const imageType = await checkImageType(imageBuffer);
    if (imageType === 'unknown') {
      throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPEG, PNG –∏–ª–∏ GIF.');
    }

    await bot.sendMessage(chatId, "–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...");
    const analysis = await analyzeImage(imageBuffer, chatId);
    await bot.sendMessage(chatId, analysis, { parse_mode: 'HTML' });
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ:', error);
    let userMessage = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –Ω–µ —Å–º–æ–≥ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. ";
    if (error.message.includes('–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä')) {
      userMessage += "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (–¥–æ 4–ú–ë).";
    } else if (error.message.includes('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')) {
      userMessage += error.message;
    } else {
      userMessage += "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ —Å –¥—Ä—É–≥–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.";
    }
    await bot.sendMessage(chatId, userMessage);
  }
}

async function handleStart(msg) {
  const chatId = msg.chat.id;
  const message = "<b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –≤–∏–∂—É. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" +
                  "/help - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n" +
                  "/about - –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö";
  await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
}

async function handleHelp(msg) {
  const chatId = msg.chat.id;
  const message = "<b>–í–æ—Ç –∫–∞–∫ –º–µ–Ω—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n\n" +
                  "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (JPEG, PNG –∏–ª–∏ GIF)\n" +
                  "2. –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–≥–æ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n" +
                  "3. –ê–Ω–∞–ª–∏–∑ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥\n\n" +
                  "<b>–°–æ–≤–µ—Ç—ã:</b>\n" +
                  "‚Ä¢ –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω–µ–µ 4–ú–ë\n" +
                  "‚Ä¢ –ß–µ—Ç–∫–∏–µ, —Ö–æ—Ä–æ—à–æ –æ—Å–≤–µ—â–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—é—Ç –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n" +
                  "‚Ä¢ –Ø –º–æ–≥—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã, —Å—Ü–µ–Ω—ã, —Ü–≤–µ—Ç–∞, —Ç–µ–∫—Å—Ç –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ\n" +
                  "‚Ä¢ –î–ª—è –Ω–∞–∏–ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∏–ª–∏ —Å—Ü–µ–Ω–∞–º–∏";
  await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
}

async function handleAbout(msg) {
  const chatId = msg.chat.id;
  const message = "<b>–Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b>, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. " +
                  "–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–∫–ª—é—á–∞—é—Ç:\n\n" +
                  "‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ —Å—Ü–µ–Ω\n" +
                  "‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤ –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n" +
                  "‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö\n" +
                  "‚Ä¢ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã\n" +
                  "‚Ä¢ –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö\n\n" +
                  "–Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞ –±–∞–∑–µ <i>Google Gemini AI</i> –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É—á—É—Å—å –∏ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É—é—Å—å!";
  await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
}

export default async function handler(req, res) {
  try {
    const { body } = req;
    if (body.message) {
      if (body.message.photo) {
        await handlePhoto(body.message);
      } else if (body.message.text) {
        const text = body.message.text.toLowerCase();
        if (text === '/start') {
          await handleStart(body.message);
        } else if (text === '/help') {
          await handleHelp(body.message);
        } else if (text === '/about') {
          await handleAbout(body.message);
        } else {
          await bot.sendMessage(body.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.");
        }
      }
    }
    res.status(200).send('OK');
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤–µ–±—Ö—É–∫–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
}

// –¢–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (process.env.NODE_ENV === 'development') {
  import('express').then((express) => {
    const app = express.default();
    app.use(express.json());
    const PORT = process.env.PORT || 3000;

    app.post('/webhook', handler);

    app.listen(PORT, () => {
      logger.info(`–õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      logger.info(`URL –≤–µ–±—Ö—É–∫–∞: http://localhost:${PORT}/webhook`);
    });
  });
}

logger.info('–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –±–æ—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');